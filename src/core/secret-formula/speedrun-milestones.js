export const speedrunMilestones = [
  {
    id: 1,
    key: "firstBoost",
    name: "第一次维度提升",
    description: "购买第一个维度提升",
    checkRequirement: () => true,
    checkEvent: GAME_EVENT.DIMBOOST_AFTER,
  },
  {
    id: 2,
    key: "firstGalaxy",
    name: "第一个星系",
    description: "购买第一个星系",
    checkRequirement: () => true,
    checkEvent: GAME_EVENT.GALAXY_RESET_AFTER,
  },
  {
    id: 3,
    key: "firstInfinity",
    name: "第一次无限",
    description: "第一次进行无限",
    checkRequirement: () => true,
    checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER,
  },
  {
    id: 4,
    key: "completeC9",
    name: "计数频率挑战",
    description: "第一次完成自动购买计数频率挑战",
    checkRequirement: () => NormalChallenge(9).isCompleted,
    checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER,
  },
  {
    id: 5,
    key: "completeAllNC",
    name: "所有的普通挑战",
    description: "完成所有的普通挑战",
    checkRequirement: () => NormalChallenges.all.countWhere(c => !c.isCompleted) === 0,
    checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER,
  },
  {
    id: 6,
    key: "breakInfinity",
    name: "打破无限",
    description: "第一次打破无限",
    checkRequirement: () => player.break,
    checkEvent: GAME_EVENT.BREAK_INFINITY,
  },
  {
    id: 7,
    key: "upgrade5e11IP",
    get name() { return `${format(5e11)} 无限升级`; },
    description: () => `购买星系增强 ${formatPercents(0.5)} 的无限升级`,
    checkRequirement: () => true,
    // This is checked within BreakInfinityUpgrade.onPurchased
  },
  {
    id: 8,
    key: "completeIC5",
    name: "无限挑战 5",
    description: "第一次完成无限挑战 5",
    checkRequirement: () => InfinityChallenge(5).isCompleted,
    checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER,
  },
  {
    id: 9,
    key: "unlockReplicanti",
    name: "复制器",
    description: "解锁复制器",
    checkRequirement: () => player.replicanti.unl,
    checkEvent: GAME_EVENT.REPLICANTI_TICK_AFTER,
  },
  {
    id: 10,
    key: "firstEternity",
    name: "第一次永恒",
    description: "第一次进行永恒",
    checkRequirement: () => true,
    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,
  },
  {
    id: 11,
    key: "allEternityMilestones",
    name: "所有的永恒里程碑",
    description: "解锁所有的永恒里程碑",
    checkRequirement: () => EternityMilestone.all.every(m => m.isReached),
    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,
  },
  {
    id: 12,
    key: "completeFirstEC",
    name: "第一个永恒挑战",
    description: "第一次完成任何级别的永恒挑战",
    checkRequirement: () => EternityChallenges.completions > 0,
    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,
  },
  {
    id: 13,
    key: "completeEC10",
    name: "永恒挑战 10",
    description: "第一次完成永恒挑战 10",
    checkRequirement: () => EternityChallenge(10).completions > 0,
    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,
  },
  {
    id: 14,
    key: "firstDilation",
    name: "第一次时间膨胀",
    description: "第一次在时间膨胀中达到永恒",
    checkRequirement: () => player.dilation.active,
    checkEvent: GAME_EVENT.ETERNITY_RESET_BEFORE,
  },
  {
    id: 15,
    key: "upgradeTTgen",
    name: "时间之理生成",
    description: "购买生成时间之理的膨胀升级",
    checkRequirement: () => true,
    // This is checked within DilationUpgradeState.onPurchased
  },
  {
    id: 16,
    key: "firstReality",
    name: "第一次现实",
    description: "第一次进行现实",
    checkRequirement: () => true,
    checkEvent: GAME_EVENT.REALITY_RESET_AFTER,
  },
  {
    id: 17,
    key: "upgradeBlackHole",
    name: "黑洞",
    description: "解锁黑洞",
    checkRequirement: () => true,
    checkEvent: GAME_EVENT.BLACK_HOLE_UNLOCKED,
  },
  {
    id: 18,
    key: "allRealityUpgrades",
    name: "所有的现实升级",
    description: "购买所有的现实升级",
    checkRequirement: () => RealityUpgrades.allBought,
    checkEvent: GAME_EVENT.REALITY_UPGRADE_BOUGHT,
  },
  {
    id: 19,
    key: "completeTeresaReality",
    name: "特蕾莎的现实",
    description: "完成特蕾莎的现实",
    checkRequirement: () => Teresa.isRunning,
    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,
  },
  {
    id: 20,
    key: "completeEffarigReality",
    name: "鹿颈长的现实",
    description: "完成所有等级的鹿颈长的现实",
    checkRequirement: () => Effarig.currentStage === EFFARIG_STAGES.COMPLETED,
    checkEvent: GAME_EVENT.REALITY_RESET_AFTER,
  },
  {
    id: 21,
    key: "completeEnslavedReality",
    name: "无名氏的现实",
    description: "完成无名氏的现实",
    checkRequirement: () => Enslaved.isRunning,
    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,
  },
  {
    id: 22,
    key: "complete36VAchievement",
    name: "所有的基本薇成就",
    description: () => `完成 ${formatInt(36)} 个薇成就`,
    checkRequirement: () => true,
    // In order to avoid unnecessary overhead, this is checked within V.checkForUnlocks instead of every tick
  },
  {
    id: 23,
    key: "completeRaMemories",
    name: "太阳神重获记忆",
    description: "太阳神重新获得所有的天神记忆",
    checkRequirement: () => Ra.totalPetLevel >= Ra.maxTotalPetLevel,
    checkEvent: GAME_EVENT.GAME_TICK_AFTER,
  },
  {
    id: 24,
    key: "completeFullDestabilize",
    name: "完全失稳",
    description: "在莱特拉的现实中禁用所有维度",
    checkRequirement: () => Laitela.isFullyDestabilized,
    // Destabilization isn't a reality reset because it shortcuts gameLoop; this is checked in laitelaRealityTick
  },
  {
    id: 25,
    key: "completeFullGame",
    name: "游戏通关！",
    description: "通关整个游戏",
    checkRequirement: () => Achievement(188).isUnlocked,
    checkEvent: GAME_EVENT.ACHIEVEMENT_UNLOCKED,
  },
];
